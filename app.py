import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
import numpy as np
from PIL import Image
import os
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# ==============================
# ‚ö†Ô∏è MUST BE FIRST STREAMLIT COMMAND
# ==============================
st.set_page_config(page_title="Potato Disease Detection", page_icon="ü•î", layout="wide")

# ==============================
# Load environment variables
# ==============================
load_dotenv()  # loads GOOGLE_API_KEY

# ==============================
# Directories & Paths
# ==============================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_PATH = os.path.join(BASE_DIR, "models", "potatoes.h5")

# ==============================
# App Title
# ==============================
st.title("ü•î AI Aloo Kisan Mitra / ‡§è‡§Ü‡§à ‡§Ü‡§≤‡•Ç ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Æ‡§ø‡§§‡•ç‡§∞")
st.markdown("Upload a potato leaf image to detect diseases and get expert advice powered by Gemini LLM.")
st.markdown("‡§∞‡•ã‡§ó‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§®‡•á ‡§î‡§∞ ‡§ú‡•á‡§Æ‡§ø‡§®‡•Ä ‡§è‡§≤‡§è‡§≤‡§è‡§Æ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§≤‡§æ‡§π ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§≤‡•Ç ‡§ï‡•á ‡§™‡§§‡•ç‡§§‡•á ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§")

# ==============================
# Load Potato Disease Model
# ==============================
@st.cache_resource
def load_potato_model():
    if not os.path.exists(MODEL_PATH):
        st.error(f"Model file not found at {MODEL_PATH}")
        return None
    try:
        model = load_model(MODEL_PATH)
        return model
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

model = load_potato_model()

# Class names
class_names = ['Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy']

# ==============================
# Image Preprocessing
# ==============================
def preprocess_image(image: Image.Image):
    img = image.resize((256, 256))
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0
    return img_array

# ==============================
# Prediction
# ==============================
def predict_disease(image: Image.Image):
    if model is None:
        return None, None
    processed_image = preprocess_image(image)
    prediction = model.predict(processed_image)
    predicted_class_idx = np.argmax(prediction[0])
    predicted_class = class_names[predicted_class_idx]
    confidence = int(np.max(prediction[0]) * 100)
    return predicted_class, confidence

# ==============================
# Gemini LLM Setup
# ==============================
@st.cache_resource
def setup_llm_chain():
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        st.error("Please set your GOOGLE_API_KEY in the .env file.")
        return None

    try:
        llm = ChatGoogleGenerativeAI(
            model="models/gemini-2.0-flash",  # Or gemini-pro
            google_api_key=api_key,
            temperature=0.1
        )

        prompt_template = """
        You are an expert plant pathologist specializing in potato diseases. 
        Based on the detected disease: {disease}, provide clear, actionable, concise advice to a farmer in a farmer-friendly format.

        STRICTLY structure your response EXACTLY as follows, with BOTH English and Hindi sections. Use bullet points, emojis (‚úÖ for Preventive, üõ† for Manage/Overcome, üå± for Care/Further Steps), and keep each section to 2-3 short sentences max. Be empathetic and simple.

        üß™ Predicted Disease: {disease}

        üåø Farmer Guidance (English + Hindi) üåø

        **English:**
        ‚úÖ **Preventive:** [1-2 concise bullet points on prevention]
        üõ† **Overcome:** [1-2 concise bullet points on immediate management]
        üå± **Care:** [1-2 concise bullet points on monitoring/further steps]

        **‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi):**
        ‚úÖ **‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ:** [1-2 ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§¨‡•Å‡§≤‡•á‡§ü ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ ‡§™‡§∞]
        üõ† **‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®:** [1-2 ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§¨‡•Å‡§≤‡•á‡§ü ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§™‡§∞]
        üå± **‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤:** [1-2 ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§¨‡•Å‡§≤‡•á‡§ü ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä/‡§Ü‡§ó‡•á ‡§ï‡•á ‡§ï‡§¶‡§Æ‡•ã‡§Ç ‡§™‡§∞]

        Translate accurately to Hindi using Devanagari script. Do NOT add extra text or deviate from this format.
        """

        prompt = PromptTemplate(
            input_variables=["disease"],
            template=prompt_template
        )

        chain = LLMChain(llm=llm, prompt=prompt)
        return chain

    except Exception as e:
        st.error(f"Error initializing Gemini LLM: {e}")
        return None

# ==============================
# Main App Logic
# ==============================
def main():
    chain = setup_llm_chain()
    if chain is None:
        st.warning("Gemini LLM is not configured. You can still upload an image for prediction.")
    
    uploaded_file = st.file_uploader("Choose a potato leaf image...", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        with st.spinner("Detecting disease..."):
            predicted_class, confidence = predict_disease(image)

        if predicted_class:
            st.success(f"**Predicted Disease**: {predicted_class.replace('Potato___', '')}")
            st.info(f"**Confidence**: {confidence}%")

            if chain:
                with st.spinner("Generating expert advice..."):
                    try:
                        disease_name = predicted_class.replace('Potato___', '')
                        response = chain.run(disease=disease_name)
                        st.markdown("### ü©∫ Advice from AI kisan mitra / AI ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Æ‡§ø‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π")
                        st.markdown(response)
                    except Exception as e:
                        st.error(f"Error generating advice: {e}")
        else:
            st.warning("Prediction failed. Please try another image.")

# ==============================
# Sidebar
# ==============================
with st.sidebar:
    st.header("Instructions")
    st.markdown("""
    1. Upload a clear image of a potato leaf.
    2. The model will classify it as Early Blight, Late Blight, or Healthy.
    3. Get tailored advice on management, prevention, and next steps.
    """)
    st.markdown("""
    1. ‡§Ü‡§≤‡•Ç ‡§ï‡•á ‡§™‡§§‡•ç‡§§‡•á ‡§ï‡•Ä ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§
    2. ‡§Æ‡•â‡§°‡§≤ ‡§á‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§ù‡•Å‡§≤‡§∏‡§æ, ‡§µ‡§ø‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§ù‡•Å‡§≤‡§∏‡§æ ‡§Ø‡§æ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡•É‡§§ ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
    3. ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®, ‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ ‡§î‡§∞ ‡§Ö‡§ó‡§≤‡•á ‡§ï‡§¶‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§∏‡§≤‡§æ‡§π ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§
    """)
    st.markdown("---")
    st.markdown("**Model Info**")
    st.markdown("Trained on potato disease dataset with 3 classes.")
    st.markdown("Powered by TensorFlow & LangChain + Gemini.")

# ==============================
# Run
# ==============================
if __name__ == "__main__":
    main()
