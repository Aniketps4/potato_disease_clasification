import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
from PIL import Image
import os
from dotenv import load_dotenv  # Load .env file
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# Load environment variables from .env file
load_dotenv()

# Set page config
st.set_page_config(page_title="Potato Disease Detection", page_icon="ЁЯеФ", layout="wide")

# Title
st.title("ЁЯеФ AI Aloo Kisan Mitra / рдПрдЖрдИ рдЖрд▓реВ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░")
st.markdown("Upload a potato leaf image to detect diseases and get expert advice powered by Gemini LLM.")
st.markdown("рд░реЛрдЧреЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдФрд░ рдЬреЗрдорд┐рдиреА рдПрд▓рдПрд▓рдПрдо рджреНрд╡рд╛рд░рд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрд▓реВ рдХреЗ рдкрддреНрддреЗ рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред")

# Load the model (using the full path provided)
@st.cache_resource
def load_potato_model():
    try:
        MODEL_PATH = os.path.join(BASE_DIR, "models", "potatoes.h5")

        model = load_model(MODEL_PATH)
        return model
    except Exception as e:
        st.error(f"Error loading model from {model_path}: {e}")
        return None

model = load_potato_model()

# Class names from the training notebook
class_names = ['Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy']

# Image preprocessing function
def preprocess_image(image):
    img = image.resize((256, 256))
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0  # Normalize
    return img_array

# Prediction function
def predict_disease(image):
    if model is None:
        return None, None
    processed_image = preprocess_image(image)
    prediction = model.predict(processed_image)
    predicted_class_idx = np.argmax(prediction[0])
    predicted_class = class_names[predicted_class_idx]
    confidence = int(np.max(prediction[0]) * 100)
    return predicted_class, confidence

# Set up Gemini LLM with LangChain
@st.cache_resource
def setup_llm_chain():
    # Get API key from environment variable (loaded from .env)
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        st.error("Please set your GOOGLE_API_KEY in the .env file.")
        return None
    
    llm = ChatGoogleGenerativeAI(
        model="models/gemini-2.0-flash",  # Or use "gemini-pro" if preferred
        google_api_key=api_key,
        temperature=0.1  # Low temperature for factual responses
    )
    
    # Enhanced Prompt template for bilingual, concise output with emojis
    prompt_template = """
    You are an expert plant pathologist specializing in potato diseases. 
    Based on the detected disease: {disease}, provide clear, actionable, concise advice to a farmer in a farmer-friendly format.
    
    STRICTLY structure your response EXACTLY as follows, with BOTH English and Hindi sections. Use bullet points, emojis (тЬЕ for Preventive, ЁЯЫа for Manage/Overcome, ЁЯМ▒ for Care/Further Steps), and keep each section to 2-3 short sentences max. Be empathetic and simple.
    
    ЁЯзк Predicted Disease: {disease}
    
    ЁЯМ┐ Farmer Guidance (English + Hindi) ЁЯМ┐
    
    **English:**
    тЬЕ **Preventive:** [1-2 concise bullet points on prevention]
    ЁЯЫа **Overcome:** [1-2 concise bullet points on immediate management]
    ЁЯМ▒ **Care:** [1-2 concise bullet points on monitoring/further steps]
    
    **рд╣рд┐рдиреНрджреА (Hindi):**
    тЬЕ **рд░реЛрдХрдерд╛рдо:** [1-2 рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯреНрд╕ рд░реЛрдХрдерд╛рдо рдкрд░]
    ЁЯЫа **рд╕рдорд╛рдзрд╛рди:** [1-2 рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯреНрд╕ рддрддреНрдХрд╛рд▓ рдкреНрд░рдмрдВрдзрди рдкрд░]
    ЁЯМ▒ **рджреЗрдЦрднрд╛рд▓:** [1-2 рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯреНрд╕ рдирд┐рдЧрд░рд╛рдиреА/рдЖрдЧреЗ рдХреЗ рдХрджрдореЛрдВ рдкрд░]
    
    Translate accurately to Hindi using Devanagari script. Do NOT add extra text or deviate from this format.
    """
    
    prompt = PromptTemplate(
        input_variables=["disease"],
        template=prompt_template
    )
    
    chain = LLMChain(llm=llm, prompt=prompt)
    return chain

# Main app logic
def main():
    chain = setup_llm_chain()
    if chain is None:
        return

    uploaded_file = st.file_uploader("Choose a potato leaf image...", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        # Display uploaded image
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_container_width=True)

        # Predict
        with st.spinner("Detecting disease..."):
            predicted_class, confidence = predict_disease(image)

        if predicted_class:
            st.success(f"**Predicted Disease**: {predicted_class.replace('Potato___', '')}")
            st.info(f"**Confidence**: {confidence}%")

            # Generate advice with LLM
            with st.spinner("Generating expert advice..."):
                try:
                    disease_name = predicted_class.replace('Potato___', '')
                    response = chain.run(disease=disease_name)
                    st.markdown("### ЁЯй║Advice from AI kisan mitra / AI рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░ рдХреА рд╕рд▓рд╛рд╣")
                    st.markdown(response)
                except Exception as e:
                    st.error(f"Error generating advice: {e}")
        else:
            st.warning("Prediction failed. Please try another image.")

if __name__ == "__main__":
    main()

# Sidebar for instructions
with st.sidebar:
    st.header("Instructions")
    st.markdown("""
    1. Upload a clear image of a potato leaf.
    2. The model will classify it as Early Blight, Late Blight, or Healthy.
    3. Get tailored advice on management, prevention, and next steps.
    """)
    st.markdown("""
    1. рдЖрд▓реВ рдХреЗ рдкрддреНрддреЗ рдХреА рд╕реНрдкрд╖реНрдЯ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред
    2. рдореЙрдбрд▓ рдЗрд╕реЗ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЭреБрд▓рд╕рд╛, рд╡рд┐рд▓рдВрдмрд┐рдд рдЭреБрд▓рд╕рд╛ рдпрд╛ рд╕реНрд╡рд╕реНрде рдХреЗ рд░реВрдк рдореЗрдВ рд╡рд░реНрдЧреАрдХреГрдд рдХрд░реЗрдЧрд╛ред
    3. рдкреНрд░рдмрдВрдзрди, рд░реЛрдХрдерд╛рдо рдФрд░ рдЕрдЧрд▓реЗ рдХрджрдореЛрдВ рдкрд░ рдЕрдиреБрдХреВрд▓рд┐рдд рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред
    """)
    st.markdown("---")
    st.markdown("**Model Info**")
    st.markdown("Trained on potato disease dataset with 3 classes.")
    st.markdown("Powered by TensorFlow & LangChain + Gemini.")
