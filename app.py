import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
import numpy as np
from PIL import Image
import os
from dotenv import load_dotenv
import google.generativeai as genai
import asyncio

# ======================================
# ЁЯМР ENVIRONMENT SETUP
# ======================================
# Load .env file
load_dotenv()

# Handle async loop issues (important for Streamlit Cloud)
try:
    asyncio.get_event_loop()
except RuntimeError:
    asyncio.set_event_loop(asyncio.new_event_loop())

# Define BASE_DIR for relative paths
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Configure Gemini API
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if GOOGLE_API_KEY:
    genai.configure(api_key=GOOGLE_API_KEY)
else:
    st.warning("тЪая╕П GOOGLE_API_KEY is not set. LLM advice will not work.")

# ======================================
# ЁЯза LOAD TENSORFLOW MODEL
# ======================================
@st.cache_resource
def load_potato_model():
    model_path = os.path.join(BASE_DIR, "models", "potatoes.h5")
    if not os.path.exists(model_path):
        st.error(f"тЭМ Model file not found at {model_path}")
        return None
    try:
        model = load_model(model_path)
        return model
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

model = load_potato_model()

# Class names must match your training labels
CLASS_NAMES = ['Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy']

# ======================================
# ЁЯЦ╝ IMAGE PREPROCESSING
# ======================================
def preprocess_image(image: Image.Image):
    img = image.resize((256, 256))  # match model input size
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    return img_array

# ======================================
# ЁЯФм PREDICTION FUNCTION
# ======================================
def predict_disease(image: Image.Image):
    if model is None:
        return None, None
    processed_image = preprocess_image(image)
    prediction = model.predict(processed_image)
    predicted_class_idx = np.argmax(prediction[0])
    predicted_class = CLASS_NAMES[predicted_class_idx]
    confidence = int(np.max(prediction[0]) * 100)
    return predicted_class, confidence

# ======================================
# ЁЯза GEMINI RESPONSE
# ======================================
def generate_gemini_advice(disease_name: str):
    if not GOOGLE_API_KEY:
        return "тЪая╕П Gemini API key not configured."

    model_gemini = genai.GenerativeModel("gemini-1.5-flash")

    prompt = f"""
    You are an expert plant pathologist specializing in potato diseases.
    Based on the detected disease: {disease_name}, provide clear, actionable, concise advice to a farmer in a farmer-friendly format.

    STRICTLY structure your response EXACTLY as follows, with BOTH English and Hindi sections.
    Use bullet points, emojis (тЬЕ for Preventive, ЁЯЫа for Manage/Overcome, ЁЯМ▒ for Care/Further Steps),
    and keep each section to 2-3 short sentences max. Be empathetic and simple.

    ЁЯзк Predicted Disease: {disease_name}

    ЁЯМ┐ Farmer Guidance (English + Hindi) ЁЯМ┐

    **English:**
    тЬЕ **Preventive:** [1-2 concise bullet points on prevention]
    ЁЯЫа **Overcome:** [1-2 concise bullet points on immediate management]
    ЁЯМ▒ **Care:** [1-2 concise bullet points on monitoring/further steps]

    **рд╣рд┐рдиреНрджреА (Hindi):**
    тЬЕ **рд░реЛрдХрдерд╛рдо:** [1-2 рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯреНрд╕ рд░реЛрдХрдерд╛рдо рдкрд░]
    ЁЯЫа **рд╕рдорд╛рдзрд╛рди:** [1-2 рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯреНрд╕ рддрддреНрдХрд╛рд▓ рдкреНрд░рдмрдВрдзрди рдкрд░]
    ЁЯМ▒ **рджреЗрдЦрднрд╛рд▓:** [1-2 рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯреНрд╕ рдирд┐рдЧрд░рд╛рдиреА/рдЖрдЧреЗ рдХреЗ рдХрджрдореЛрдВ рдкрд░]

    Translate accurately to Hindi using Devanagari script. Do NOT add extra text or deviate from this format.
    """

    try:
        response = model_gemini.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"тЭМ Error generating Gemini advice: {e}"

# ======================================
# ЁЯЯй STREAMLIT UI
# ======================================
st.set_page_config(page_title="Potato Disease Detection", page_icon="ЁЯеФ", layout="wide")

st.title("ЁЯеФ AI Aloo Kisan Mitra / рдПрдЖрдИ рдЖрд▓реВ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░")
st.markdown("Upload a potato leaf image to detect diseases and get expert advice powered by Gemini LLM.")
st.markdown("рд░реЛрдЧреЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдФрд░ рдЬреЗрдорд┐рдиреА рдПрд▓рдПрд▓рдПрдо рджреНрд╡рд╛рд░рд╛ рд╕рдВрдЪрд╛рд▓рд┐рдд рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрд▓реВ рдХреЗ рдкрддреНрддреЗ рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред")

uploaded_file = st.file_uploader("ЁЯУд Upload Potato Leaf Image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="ЁЯЦ╝ Uploaded Image", use_container_width=True)

    with st.spinner("ЁЯФН Detecting disease..."):
        predicted_class, confidence = predict_disease(image)

    if predicted_class:
        disease_name = predicted_class.replace("Potato___", "")
        st.success(f"**Predicted Disease:** {disease_name}")
        st.info(f"**Model Confidence:** {confidence}%")

        with st.spinner("ЁЯза Generating expert farmer advice..."):
            advice = generate_gemini_advice(disease_name)
            st.markdown("### ЁЯй║ AI Kisan Mitra Advice / рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░ рдХреА рд╕рд▓рд╛рд╣")
            st.markdown(advice)
    else:
        st.warning("тЪая╕П Prediction failed. Please try another image.")

# ======================================
# ЁЯУМ SIDEBAR
# ======================================
with st.sidebar:
    st.header("ЁЯУМ Instructions")
    st.markdown("""
    1. Upload a clear potato leaf image.  
    2. The model classifies it as Early Blight, Late Blight, or Healthy.  
    3. Get AI-powered actionable advice in English + Hindi.
    """)
    st.markdown("""
    1. рдЖрд▓реВ рдХреЗ рдкрддреНрддреЗ рдХреА рд╕реНрдкрд╖реНрдЯ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред  
    2. рдореЙрдбрд▓ рдЗрд╕реЗ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЭреБрд▓рд╕рд╛, рд╡рд┐рд▓рдВрдмрд┐рдд рдЭреБрд▓рд╕рд╛ рдпрд╛ рд╕реНрд╡рд╕реНрде рдХреЗ рд░реВрдк рдореЗрдВ рд╡рд░реНрдЧреАрдХреГрдд рдХрд░реЗрдЧрд╛ред  
    3. рдЖрдкрдХреЛ рд╣рд┐рдВрджреА рдФрд░ рдЕрдВрдЧреНрд░реЗрдЬреА рдореЗрдВ рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рд╣реЛрдЧреАред
    """)
    st.divider()
    st.caption("ЁЯза Powered by TensorFlow + Google Gemini 1.5 Flash")
